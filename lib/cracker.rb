class Cracker
  attr_reader :encrypted_message  # => nil

  CHAR_MAP = ["a", "b", "c", "d",  # => "d"
              "e", "f", "g", "h",  # => "h"
              "i", "j", "k", "l",  # => "l"
              "m", "n", "o", "p",  # => "p"
              "q", "r", "s", "t",  # => "t"
              "u", "v", "w", "x",  # => "x"
              "y", "z", "0", "1",  # => "1"
              "2", "3", "4", "5",  # => "5"
              "6", "7", "8", "9",  # => "9"
              " ", ".", ","]       # => ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", " ", ".", ","]

  def initialize(encrypted_message)
    @message = encrypted_message.chars  # => [".", "6", "b", "i", "5", "z", "w", "t", " ", "w", " ", "2", "w", "w", ",", "z", "4", "7", "k", "r", "p", "x", "8", "p", "5", "2", "8", "j"]
  end

  def end_value
    @message[-7..-1].map do |character|  # => ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"], ["x", "8", "p", "5", "2", "8", "j"]
      CHAR_MAP.index(character)          # => 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9, 23, 34, 15, 31, 28, 34, 9
    end                                  # => [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9], [23, 34, 15, 31, 28, 34, 9]
  end

  def original_value
    "..end..".chars.map do |character|  # => [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."], [".", ".", "e", "n", "d", ".", "."]
      CHAR_MAP.index(character)         # => 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37, 37, 37, 4, 13, 3, 37, 37
    end                                 # => [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37], [37, 37, 4, 13, 3, 37, 37]
  end

  def difference
  end_value.zip(original_value).map { |x, y| y - x }  # => [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28], [14, 3, -11, -18, -25, 3, 28]
  end

  def find_rotators
    if (@message.length % 4) == 0   # => true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
      difference[-4..-1]            # => [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28]
    elsif @message.length % 4 ==1
      difference[-5..-2]
    elsif @message.length % 4 == 2
      difference[-6..-3]
    elsif @message.length % 4 == 3
      difference[-7..-4]
    end                             # => [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28], [-18, -25, 3, 28]
  end

  def message_value
    message_value = @message.map do |character|  # => [".", "6", "b", "i", "5", "z", "w", "t", " ", "w", " ", "2", "w", "w", ",", "z", "4", "7", "k", "r", "p", "x", "8", "p", "5", "2", "8", "j"], [".", "6", "b", "i", "5", "z", "w", "t", " ", "w", " ", "2", "w", "w", ",", "z", "4", "7", "k", "r", "p", "x", "8", "p", "5", "2", "8", "j"], [".", "6", "b", "i", "5", "z", "w", "t", " ", "w", " ", "2", "w", "w", ",", "z", "4", "7", "k", "r", "p", "x", "8", "p", "5", "2", "8", "j"], [".", "6", "b", "i", "5", "z", "w", "t", " ", "w", " ", "2", "w", "w", ",", "z", "4", "7", "k", "r", "p", "x", "8", "p", "5", "2", "8", "j"]
      CHAR_MAP.index(character)                  # => 37, 32, 1, 8, 31, 25, 22, 19, 36, 22, 36, 28, 22, 22, 38, 25, 30, 33, 10, 17, 15, 23, 34, 15, 31, 28, 34, 9, 37, 32, 1, 8, 31, 25, 22, 19, 36, 22, 36, 28, 22, 22, 38, 25, 30, 33, 10, 17, 15, 23, 34, 15, 31, 28, 34, 9, 37, 32, 1, 8, 31, 25, 22, 19, 36, 22, 36, 28, 22, 22, 38, 25, 30, 33, 10, 17, 15, 23, 34, 15, 31, 28, 34, 9, 37, 32, 1, 8, 31, 25, 22, 19, 36, 22, 36, 28, 22, 22, 38, 25, 30, 33, 10, 17, 15, 23, 34, 15, 31, 28, 34, 9
    end                                          # => [37, 32, 1, 8, 31, 25, 22, 19, 36, 22, 36, 28, 22, 22, 38, 25, 30, 33, 10, 17, 15, 23, 34, 15, 31, 28, 34, 9], [37, 32, 1, 8, 31, 25, 22, 19, 36, 22, 36, 28, 22, 22, 38, 25, 30, 33, 10, 17, 15, 23, 34, 15, 31, 28, 34, 9], [37, 32, 1, 8, 31, 25, 22, 19, 36, 22, 36, 28, 22, 22, 38, 25, 30, 33, 10, 17, 15, 23, 34, 15, 31, 28, 34, 9], [37, 32, 1, 8, 31, 25, 22, 19, 36, 22, 36, 28, 22, 22, 38, 25, 30, 33, 10, 17, 15, 23, 34, 15, 31, 28, 34, 9]
  end

  def slice_message
    sliced_message  = []                        # => [], [], []
    message_value.each_slice(4) do |character|  # => [37, 32, 1, 8, 31, 25, 22, 19, 36, 22, 36, 28, 22, 22, 38, 25, 30, 33, 10, 17, 15, 23, 34, 15, 31, 28, 34, 9], [37, 32, 1, 8, 31, 25, 22, 19, 36, 22, 36, 28, 22, 22, 38, 25, 30, 33, 10, 17, 15, 23, 34, 15, 31, 28, 34, 9], [37, 32, 1, 8, 31, 25, 22, 19, 36, 22, 36, 28, 22, 22, 38, 25, 30, 33, 10, 17, 15, 23, 34, 15, 31, 28, 34, 9]
      sliced_message << character               # => [[37, 32, 1, 8]], [[37, 32, 1, 8], [31, 25, 22, 19]], [[37, 32, 1, 8], [31, 25, 22, 19], [36, 22, 36, 28]], [[37, 32, 1, 8], [31, 25, 22, 19], [36, 22, 36, 28], [22, 22, 38, 25]], [[37, 32, 1, 8], [31, 25, 22, 19], [36, 22, 36, 28], [22, 22, 38, 25], [30, 33, 10, 17]], [[37, 32, 1, 8], [31, 25, 22, 19], [36, 22, 36, 28], [22, 22, 38, 25], [30, 33, 10, 17], [15, 23, 34, 15]], [[37, 32, 1, 8], [31, 25, 22, 19], [36, 22, 36, 28], [22, 22, 38, 25], [30, 33, 10, 17], [15, 23, 34, 15], [31, 28, 34, 9]], [[37, 32, 1, 8]], [[37, 32, 1, 8], [31, 25, 22, 19]], [[37, 32, 1, 8], [31, 25, 22, 19], [36, 22, 36, 28]], [[37, 32, 1, 8], [31, 25, 22, 19], [36, 22, 36, 28], [22, 22, 38, 25]], [[37, 32, 1, 8], [31, 25, 22, 19], [36, 22, 36, 28], [22, 22, 38, 25], [30, 33, 10, 17]], [[37, 32, 1, 8], [31, 25, 22, 19], [36, 22, 36, 28], [22, 22, 38, 25], [30, 33, 10, 17], [15, 23, 34, 15]], [[37, 32, 1, 8], [31, 25, 22, 19], [36, 22, 36, 28], [22, 22, 38, 25], [30, 33, 10, 17], [15, 23, 34, 15], [31, 28, 34, 9]], [[37, 32, 1, 8]], [[37, 32, 1, 8], [31, 25, 22, 19]], [[37, 32, 1, 8], [31, 25, 22, 19], [36, 22, 36, 28]], [[37, 32, 1, 8], [31, 25, 22, 19], [36, 22, 36, 28], [22, 22, 38, 25]], [[37, 32, 1, 8], [31, 25, 22, 19], [36, 22, 36, 28], [22, 22, 38, 25], [30, 33, 10, 17]], [[37, 32, 1, 8], [31, 25, 22, 19], [36, 22, 36, 28], [22, 22, 38, 25], [30, 33, 10, 17], [15, 23, 34, 15]], [[37, 32, 1, 8], [31, 25, 22, 19], [36, 22, 36, 28], [22, 22, 38, 25], [30, 33, 10, 17], [15, 23, 34, 15], [31, 28, 34, 9]]
    end                                         # => nil, nil, nil
    sliced_message                              # => [[37, 32, 1, 8], [31, 25, 22, 19], [36, 22, 36, 28], [22, 22, 38, 25], [30, 33, 10, 17], [15, 23, 34, 15], [31, 28, 34, 9]], [[37, 32, 1, 8], [31, 25, 22, 19], [36, 22, 36, 28], [22, 22, 38, 25], [30, 33, 10, 17], [15, 23, 34, 15], [31, 28, 34, 9]], [[37, 32, 1, 8], [31, 25, 22, 19], [36, 22, 36, 28], [22, 22, 38, 25], [30, 33, 10, 17], [15, 23, 34, 15], [31, 28, 34, 9]]
  end

  def rotate_message
    rotated_message = []                                # => [], []
    slice_message.each do |array|                       # => [[37, 32, 1, 8], [31, 25, 22, 19], [36, 22, 36, 28], [22, 22, 38, 25], [30, 33, 10, 17], [15, 23, 34, 15], [31, 28, 34, 9]], [[37, 32, 1, 8], [31, 25, 22, 19], [36, 22, 36, 28], [22, 22, 38, 25], [30, 33, 10, 17], [15, 23, 34, 15], [31, 28, 34, 9]]
      array.each.with_index do |character, index|       # => #<Enumerator: [37, 32, 1, 8]:each>, #<Enumerator: [31, 25, 22, 19]:each>, #<Enumerator: [36, 22, 36, 28]:each>, #<Enumerator: [22, 22, 38, 25]:each>, #<Enumerator: [30, 33, 10, 17]:each>, #<Enumerator: [15, 23, 34, 15]:each>, #<Enumerator: [31, 28, 34, 9]:each>, #<Enumerator: [37, 32, 1, 8]:each>, #<Enumerator: [31, 25, 22, 19]:each>, #<Enumerator: [36, 22, 36, 28]:each>, #<Enumerator: [22, 22, 38, 25]:each>, #<Enumerator: [30, 33, 10, 17]:each>, #<Enumerator: [15, 23, 34, 15]:each>, #<Enumerator: [31, 28, 34, 9]:each>
        rotation = if index == 0                        # => true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false
          find_rotators[0]                              # => -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18
        elsif index == 1                                # => true, false, false, true, false, false, true, false, false, true, false, false, true, false, false, true, false, false, true, false, false, true, false, false, true, false, false, true, false, false, true, false, false, true, false, false, true, false, false, true, false, false
          find_rotators[1]                              # => -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25
        elsif index == 2                                # => true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false
          find_rotators[2]                              # => 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
        elsif index == 3                                # => true, true, true, true, true, true, true, true, true, true, true, true, true, true
          find_rotators[3]                              # => 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28
        end                                             # => -18, -25, 3, 28, -18, -25, 3, 28, -18, -25, 3, 28, -18, -25, 3, 28, -18, -25, 3, 28, -18, -25, 3, 28, -18, -25, 3, 28, -18, -25, 3, 28, -18, -25, 3, 28, -18, -25, 3, 28, -18, -25, 3, 28, -18, -25, 3, 28, -18, -25, 3, 28, -18, -25, 3, 28
        rotated_message << (character + rotation) % 39  # => [19], [19, 7], [19, 7, 4], [19, 7, 4, 36], [19, 7, 4, 36, 13], [19, 7, 4, 36, 13, 0], [19, 7, 4, 36, 13, 0, 25], [19, 7, 4, 36, 13, 0, 25, 8], [19, 7, 4, 36, 13, 0, 25, 8, 18], [19, 7, 4, 36, 13, 0, 25, 8, 18, 36], [19, 7, 4, 36, 13, 0, 25, 8, 18, 36, 0], [19, 7, 4, 36, 13, 0, 25, 8, 18, 36, 0, 17], [19, 7, 4, 36, 13, 0, 25, 8, 18, 36, 0, 17, 4], [19, 7, 4, 36, 13, 0, 25, 8, 18, 36, 0, 17, 4, 36], [19, 7, 4, 36, 13, 0, 25, 8, 18, 36, 0, 17, 4, 36, 2], [19, 7, 4, 36, 13, 0, 25, 8, 18, 36, 0, 17, 4, 36, 2, 14], [19, 7, 4, 36, 13, 0, 25, 8, 18, 36, 0, 17, 4, 36, 2, 14, 12], [19, 7, 4, 36, 13, 0, 25, 8, 18, 36, 0, 17, 4, 36, 2, 14, 12, 8], [19, 7, 4, 36, 13, 0, 25, 8, 18, 36, 0, 17, 4, 36, 2, 14, 12, 8, 13], [19, 7, 4, 36, 13, 0, 25, 8, 18, 36, 0, 17, 4, 36, 2, 14, 12, 8, 13, 6], [19, 7, 4, 36, 13, 0, 25, 8, 18, 36, 0, 17, 4, 36, 2, 14, 12, 8, 13, 6, 36], [19, 7, 4, 36, 13, 0, 25, 8, 18, 36, 0, 17, 4, 36, 2, 14, 12, 8, 13, 6, 36, 37], [19, 7, 4, 36, 13, 0, 25, 8, 18, 36, 0, 17, 4, 36, 2, 14, 12, 8, 13, 6, 36, 37, 37], [19, 7, 4, 36, 13, 0, 25, 8, 18, 36, 0, 17, 4, 36, 2, 14, 12, 8, 13, 6, 36, 37, 37, 4], [19, 7, 4, 36, 13, 0, 25, 8, 18, 36, 0, 17, 4, 36, 2, 14, 12, 8, 13, 6, 36, 37, 37, 4, 13], [19, 7, 4, 36, 13, 0, 25, 8, 18, 36, 0, 17, 4, 36, 2, 14, 12, 8, 13, 6, 36, 37, 37, 4, 13, 3], [19, 7, 4, 36, 13, 0, 25, 8, 18, 36, 0, 17, 4, 36, 2, 14, 12, 8, 13, 6, 36, 37, 37, 4, 13, 3, 37], [19, 7, 4, 36, 13, 0, 25, 8, 18, 36, 0, 17, 4, 36, 2, 14, 12, 8, 13, 6, 36, 37, 37, 4, 13, 3, 37, 37], [19], [19, 7], [19, 7, 4], [19, 7, 4, 36], [19, 7, 4, 36, 13], [19, 7, 4, 36, 13, 0], [19, 7, 4, 36, 13, 0, 25], [19, 7, 4, 36, 13, 0, 25, 8], [19, 7, 4, 36, 13, 0, 25, 8, 18], [19, 7, 4, 36, 13, 0, 25, 8, 18, 36], [19, 7, 4, 36, 13, 0, 25, 8, 18, 36, 0], [19, 7, 4, 36, 13, 0, 25, 8, 18, 36, 0, 17], [19, 7, 4, 36, 13, 0, 25, 8, 18, 36, 0, 17, 4], [19, 7, 4, 36, 13, 0, 25, 8, 18, 36, 0, 17, 4, 36], [19, 7, 4, 36, 13, 0, 25, 8, 18, 36, 0, 17, 4, 36, 2], [19, 7, 4, 36, 13, 0, 25, 8, 18, 36, 0, 17, 4, 36, 2, 14], [19, 7, 4, 36, 13, 0, 25, 8, 18, 36, 0, 17, 4, 36, 2, 14, 12], [19, 7, 4, 36, 13, 0, 25, 8, 18, 36, 0, 17, 4, 36, 2, 14, 12, 8], [19, 7, 4, 36, 13, 0, 25, 8, 18, 36, 0, 17, 4, 36, 2, 14, 12, 8, 13], [19, 7, 4, 36, 13, 0, 25, 8, 18, 36, 0, 17, 4, 36, 2, 14, 12, 8, 13, 6], [19, 7, 4, 36, 13, 0, 25, 8, 18, 36, 0, 17, 4, 36, 2, 14, 12, 8, 13, 6, 36], [19, 7, 4, 36, 13, 0, 25, 8, 18, 36, 0, 17, 4, 36, 2, 14, 12, 8, 13, 6, 36, 37], [19, 7, 4, 36, 13, 0, 25, 8, 18, 36, 0, 17, 4, 36, 2, 14, 12, 8, 13, 6, 36, 37, 37], [19, 7, 4, 36, 13, 0, 25, 8, 18, 36, 0, 17, 4, 36, 2, 14, 12, 8, 13, 6, 36, 37, 37, 4], [19, 7, 4, 36, 13, 0, 25, 8, 18, 36, 0, 17, 4, 36, 2, 14, 12, 8, 13, 6, 36, 37, 37, 4, 13], [19, 7, 4, 36, 13, 0, 25, 8, 18, 36, 0, 17, 4, 36, 2, 14, 12, 8, 13, 6, 36, 37, 37, 4, 13, 3], [19, 7, 4, 36, 13, 0, 25, 8, 18, 36, 0, 17, 4, 36, 2, 14, 12, 8, 13, 6, 36, 37, 37, 4, 13, 3, 37], [19, 7, 4, 36, 13, 0, 25, 8, 18, 36, 0, 17, 4, 36, 2, 14, 12, 8, 13, 6, 36, 37, 37, 4, 13, 3, 37, 37]
      end                                               # => [37, 32, 1, 8], [31, 25, 22, 19], [36, 22, 36, 28], [22, 22, 38, 25], [30, 33, 10, 17], [15, 23, 34, 15], [31, 28, 34, 9], [37, 32, 1, 8], [31, 25, 22, 19], [36, 22, 36, 28], [22, 22, 38, 25], [30, 33, 10, 17], [15, 23, 34, 15], [31, 28, 34, 9]
    end                                                 # => [[37, 32, 1, 8], [31, 25, 22, 19], [36, 22, 36, 28], [22, 22, 38, 25], [30, 33, 10, 17], [15, 23, 34, 15], [31, 28, 34, 9]], [[37, 32, 1, 8], [31, 25, 22, 19], [36, 22, 36, 28], [22, 22, 38, 25], [30, 33, 10, 17], [15, 23, 34, 15], [31, 28, 34, 9]]
    rotated_message                                     # => [19, 7, 4, 36, 13, 0, 25, 8, 18, 36, 0, 17, 4, 36, 2, 14, 12, 8, 13, 6, 36, 37, 37, 4, 13, 3, 37, 37], [19, 7, 4, 36, 13, 0, 25, 8, 18, 36, 0, 17, 4, 36, 2, 14, 12, 8, 13, 6, 36, 37, 37, 4, 13, 3, 37, 37]
  end

  def crack_message
    crack_message = rotate_message.map do |character|  # => [19, 7, 4, 36, 13, 0, 25, 8, 18, 36, 0, 17, 4, 36, 2, 14, 12, 8, 13, 6, 36, 37, 37, 4, 13, 3, 37, 37]
      CHAR_MAP[character]                              # => "t", "h", "e", " ", "n", "a", "z", "i", "s", " ", "a", "r", "e", " ", "c", "o", "m", "i", "n", "g", " ", ".", ".", "e", "n", "d", ".", "."
    end                                                # => ["t", "h", "e", " ", "n", "a", "z", "i", "s", " ", "a", "r", "e", " ", "c", "o", "m", "i", "n", "g", " ", ".", ".", "e", "n", "d", ".", "."]
    crack_message.join                                 # => "the nazis are coming ..end.."
  end
end

new_crack = Cracker.new(".6bi5zwt w 2ww,z47krpx8p528j")  # => #<Cracker:0x007fa7528655c8 @message=[".", "6", "b", "i", "5", "z", "w", "t", " ", "w", " ", "2", "w", "w", ",", "z", "4", "7", "k", "r", "p", "x", "8", "p", "5", "2", "8", "j"]>
new_crack.end_value                                      # => [23, 34, 15, 31, 28, 34, 9]
new_crack.original_value                                 # => [37, 37, 4, 13, 3, 37, 37]
new_crack.difference                                     # => [14, 3, -11, -18, -25, 3, 28]
new_crack.find_rotators                                  # => [-18, -25, 3, 28]
new_crack.message_value                                  # => [37, 32, 1, 8, 31, 25, 22, 19, 36, 22, 36, 28, 22, 22, 38, 25, 30, 33, 10, 17, 15, 23, 34, 15, 31, 28, 34, 9]
new_crack.slice_message                                  # => [[37, 32, 1, 8], [31, 25, 22, 19], [36, 22, 36, 28], [22, 22, 38, 25], [30, 33, 10, 17], [15, 23, 34, 15], [31, 28, 34, 9]]
new_crack.rotate_message                                 # => [19, 7, 4, 36, 13, 0, 25, 8, 18, 36, 0, 17, 4, 36, 2, 14, 12, 8, 13, 6, 36, 37, 37, 4, 13, 3, 37, 37]
new_crack.crack_message                                  # => "the nazis are coming ..end.."
